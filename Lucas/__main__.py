import importlib
import time
import re
from sys import argv
from typing import Optional

from Lucas import (
    ALLOW_EXCL,
    CERT_PATH,
    DONATION_LINK,
    LOGGER,
    OWNER_ID,
    PORT,
    SUPPORT_CHAT,
    TOKEN,
    URL,
    WEBHOOK,
    SUPPORT_CHAT,
    dispatcher,
    StartTime,
    telethn,
    pbot,
    updater,
)

# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from Lucas.modules import ALL_MODULES
from Lucas.modules.helper_funcs.chat_status import is_user_admin
from Lucas.modules.helper_funcs.misc import paginate_modules
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop, run_async
from telegram.utils.helpers import escape_markdown


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


PM_START_TEXT = """
ùêáùêûùê•ùê•ùê® {},

‚ö´ ùêà ùêöùê¶ ùêãùêÆùêúùêöùê¨, ùêáùê¢ùê†ùê°ùê•ùê≤ ùêöùêùùêØùêöùêßùêúùêûùêù ùêìùêûùê•ùêûùê†ùê´ùêöùê¶ ùêÅùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùê•ùê®ùê≠ùê¨ ùê®ùêü ùêöùê¶ùêöùê≥ùê¢ùêßùê† ùê≠ùê®ùê®ùê•ùê¨

‚ö´ ùêà ùêöùê¶ ùê°ùêûùê´ùêû ùê≠ùê® ùê°ùêûùê•ùê© ùê≤ùê®ùêÆ ùêåùêöùêßùêöùê†ùê¢ùêßùê† ùê≤ùê®ùêÆùê´ ùêìùêûùê•ùêûùê†ùê´ùêöùê¶ ùê†ùê´ùê®ùêÆùê©ùê¨

‚ö´ ùêáùê¢ùê≠ /help   
"""

buttons = [
    [
        InlineKeyboardButton(
            text="‚ûïÔ∏è ùêÄùêÉùêÉ ùêãùêîùêÇùêÄùêí ùêìùêé ùêÜùêëùêéùêîùêè ‚ûïÔ∏è", url="t.me/LucasOfficialBot?startgroup=true"),
    ],
    [
        InlineKeyboardButton(text="üí†ùêÄùêÅùêéùêîùêìüí†", callback_data="lucas_"),
        InlineKeyboardButton(
            text="ü´Çùêíùêîùêèùêèùêéùêëùêìü´Ç", url=f"https://t.me/{SUPPORT_CHAT}"
        ),
    ],
    [
        InlineKeyboardButton(text="üÜòùêáùêÑùêãùêè & ùêÇùêéùêåùêåùêÄùêçùêÉùêíüÜò", callback_data="help_back"),
    ],
]


HELP_STRINGS = """
`ùêáùêûùê•ùê•ùê® {},ùêà ùêöùê¶ ùêãùêÆùêúùêöùê¨ [üôã‚Äç‚ôÄÔ∏è](https://telegra.ph/file/8db76d7aa4f2aee630167.jpg) 
`ùêÇùê•ùê¢ùêúùê§ ùêéùêß ùêìùê°ùêû ùêÅùêÆùê≠ùê≠ùê®ùêßùê¨ ùêÅùêûùê•ùê®ùê∞ ùêìùê® ùêÜùêûùê≠ ùêÉùê®ùêúùêÆùê¶ùêûùêßùê≠ùêöùê≠ùê¢ùê®ùêß ùêÄùêõùê®ùêÆùê≠ ùêíùê©ùêûùêúùê¢ùêüùê¢ùêú ùêåùê®ùêùùêÆùê•ùêûùê¨ ....`"""

lucas_IMG = "https://telegra.ph/file/8db76d7aa4f2aee630167.jpg"

DONATE_STRING = """ùêáùêûùê≤ùêö, ùê†ùê•ùêöùêù ùê≠ùê® ùê°ùêûùêöùê´ ùê≤ùê®ùêÆ ùê∞ùêöùêßùê≠ ùê≠ùê® ùêùùê®ùêßùêöùê≠ùêû!
 ùêòùê®ùêÆ ùêúùêöùêß ùê¨ùêÆùê©ùê©ùê®ùê´ùê≠ ùê≠ùê°ùêû ùê©ùê´ùê®ùê£ùêûùêúùê≠ ùêõùê≤ ùêúùê®ùêßùê≠ùêöùêúùê≠ùê¢ùêßùê† @mkspali \
 ùêíùêÆùê©ùê©ùê®ùê´ùê≠ùê¢ùêßùê† ùê¢ùê¨ ùêßùê®ùê≠ ùêöùê•ùê∞ùêöùê≤ùê¨ ùêüùê¢ùêßùêöùêßùêúùê¢ùêöùê•! \
 ùêìùê°ùê®ùê¨ùêû ùê∞ùê°ùê® ùêúùêöùêßùêßùê®ùê≠ ùê©ùê´ùê®ùêØùê¢ùêùùêû ùê¶ùê®ùêßùêûùê≠ùêöùê´ùê≤ ùê¨ùêÆùê©ùê©ùê®ùê´ùê≠ ùêöùê´ùêû ùê∞ùêûùê•ùêúùê®ùê¶ùêû ùê≠ùê® ùê°ùêûùê•ùê© ùêÆùê¨ ùêùùêûùêØùêûùê•ùê®ùê© ùê≠ùê°ùêû ùêõùê®ùê≠ ùêöùê≠ ."""

TECHNO_IMG = "https://telegra.ph/file/8db76d7aa4f2aee630167.jpg"
IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("Lucas.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


@run_async
def test(update: Update, context: CallbackContext):
    # pprint(eval(str(update)))
    # update.effective_message.reply_text("Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN)
    update.effective_message.reply_text("This person edited a message")
    print(update.effective_message)


@run_async
def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è BACK ‚û°Ô∏è", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            update.effective_message.reply_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_text(
            "I am awake already!\n<b>Haven't slept since:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


@run_async
def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "Here is the help for the *{}* module:\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="Back", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


@run_async
def yone_about_callback(update, context):
    query = update.callback_query
    if query.data == "Lucas_":
        query.message.edit_text(
            text=""" ‚ÑπÔ∏è ùêà ùêöùê¶ *ùêãùêÆùêúùêöùê¨*, ùêö ùê©ùê®ùê∞ùêûùê´ùêüùêÆùê• ùê†ùê´ùê®ùêÆùê© ùê¶ùêöùêßùêöùê†ùêûùê¶ùêûùêßùê≠ ùêõùê®ùê≠ ùêõùêÆùê¢ùê•ùê≠ ùê≠ùê® ùê°ùêûùê•ùê© ùê≤ùê®ùêÆ ùê¶ùêöùêßùêöùê†ùêû ùê≤ùê®ùêÆùê´ ùê†ùê´ùê®ùêÆùê© ùêûùêöùê¨ùê¢ùê•ùê≤.
                 \n‚ö´ ùêà ùêúùêöùêß ùê´ùêûùê¨ùê≠ùê´ùê¢ùêúùê≠ ùêÆùê¨ùêûùê´ùê¨.
                 \n‚ö´ ùêà ùêúùêöùêß ùê†ùê´ùêûùêûùê≠ ùêÆùê¨ùêûùê´ùê¨ ùê∞ùê¢ùê≠ùê° ùêúùêÆùê¨ùê≠ùê®ùê¶ùê¢ùê≥ùêöùêõùê•ùêû ùê∞ùêûùê•ùêúùê®ùê¶ùêû ùê¶ùêûùê¨ùê¨ùêöùê†ùêûùê¨ ùêöùêßùêù ùêûùêØùêûùêß ùê¨ùêûùê≠ ùêö ùê†ùê´ùê®ùêÆùê©'ùê¨ ùê´ùêÆùê•ùêûùê¨.
                 \n‚ö´ ùêà ùê°ùêöùêØùêû ùêöùêß ùêöùêùùêØùêöùêßùêúùêûùêù ùêöùêßùê≠ùê¢-ùêüùê•ùê®ùê®ùêù ùê¨ùê≤ùê¨ùê≠ùêûùê¶.
                 \n‚ö´ ùêà ùêúùêöùêß ùê∞ùêöùê´ùêß ùêÆùê¨ùêûùê´ùê¨ ùêÆùêßùê≠ùê¢ùê• ùê≠ùê°ùêûùê≤ ùê´ùêûùêöùêúùê° ùê¶ùêöùê± ùê∞ùêöùê´ùêßùê¨, ùê∞ùê¢ùê≠ùê° ùêûùêöùêúùê° ùê©ùê´ùêûùêùùêûùêüùê¢ùêßùêûùêù ùêöùêúùê≠ùê¢ùê®ùêßùê¨ ùê¨ùêÆùêúùê° ùêöùê¨ ùêõùêöùêß, ùê¶ùêÆùê≠ùêû, ùê§ùê¢ùêúùê§, ùêûùê≠ùêú.
                 \n‚ö´ ùêà ùê°ùêöùêØùêû ùêö ùêßùê®ùê≠ùêû ùê§ùêûùêûùê©ùê¢ùêßùê† ùê¨ùê≤ùê¨ùê≠ùêûùê¶, ùêõùê•ùêöùêúùê§ùê•ùê¢ùê¨ùê≠ùê¨, ùêöùêßùêù ùêûùêØùêûùêß ùê©ùê´ùêûùêùùêûùê≠ùêûùê´ùê¶ùê¢ùêßùêûùêù ùê´ùêûùê©ùê•ùê¢ùêûùê¨ ùê®ùêß ùêúùêûùê´ùê≠ùêöùê¢ùêß ùê§ùêûùê≤ùê∞ùê®ùê´ùêùùê¨.
                 \n‚ö´ ùêà ùêúùê°ùêûùêúùê§ ùêüùê®ùê´ ùêöùêùùê¶ùê¢ùêßùê¨' ùê©ùêûùê´ùê¶ùê¢ùê¨ùê¨ùê¢ùê®ùêßùê¨ ùêõùêûùêüùê®ùê´ùêû ùêûùê±ùêûùêúùêÆùê≠ùê¢ùêßùê† ùêöùêßùê≤ ùêúùê®ùê¶ùê¶ùêöùêßùêù ùêöùêßùêù ùê¶ùê®ùê´ùêû ùê¨ùê≠ùêÆùêüùêüùê¨
                 \n‚ö´ ùêãùêÆùêúùêöùê¨'ùê¨ ùê•ùê¢ùêúùêûùêßùê¨ùêûùêù ùêÆùêßùêùùêûùê´ ùê≠ùê°ùêû ùêÜùêçùêî ùêÜùêûùêßùêûùê´ùêöùê• ùêèùêÆùêõùê•ùê¢ùêú ùêãùê¢ùêúùêûùêßùê¨ùêû ùêØùüë.ùüé
                 \n‚ö´ ùêáùêûùê´ùêû ùê¢ùê¨ ùê≠ùê°ùêû [üíæùêëùêûùê©ùê®ùê¨ùê¢ùê≠ùê®ùê´ùê≤üíæ](https://github.com/BotMasterOfficial/Lucas)
                 \n‚ö´ ùêàùêü ùê≤ùê®ùêÆ ùê°ùêöùêØùêû ùêöùêßùê≤ ùê™ùêÆùêûùê¨ùê≠ùê¢ùê®ùêß ùêöùêõùê®ùêÆùê≠ ùê≤ùê®ùêßùêû, ùê•ùêûùê≠ ùêÆùê¨ ùê§ùêßùê®ùê∞ ùêöùê≠ @BotMasterOfficial""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="Back", callback_data="lucas_back")
                 ]
                ]
            ),
        )
    elif query.data == "lucas_back":
        query.message.edit_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
        )


@run_async
def Source_about_callback(update, context):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=""" ùêáùêûùê•ùê•ùê®..ü§ó ùêà ùêöùê¶ *ùêãùêÆùêúùêöùê¨*
                 \nùêáùêûùê´ùêû ùê¢ùê¨ ùê≠ùê°ùêû [ùêíùê®ùêÆùê´ùêúùêû ùêÇùê®ùêùùêû](https://github.com/BotMasterOfficial/Lucas) .""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="Go Back", callback_data="source_back")
                 ]
                ]
            ),
        )
    elif query.data == "source_back":
        query.message.edit_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
        )

@run_async
def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Help",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "Contact me in PM to get the list of possible commands.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Help",
                            url="t.me/{}?start=help".format(context.bot.username),
                        )
                    ]
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Back", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "ùêìùê°ùêûùê¨ùêû ùêöùê´ùêû ùê≤ùê®ùêÆùê´ ùêúùêÆùê´ùê´ùêûùêßùê≠ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "ùêíùêûùêûùê¶ùê¨ ùê•ùê¢ùê§ùêû ùê≠ùê°ùêûùê´ùêû ùêöùê´ùêûùêß'ùê≠ ùêöùêßùê≤ ùêÆùê¨ùêûùê´ ùê¨ùê©ùêûùêúùê¢ùêüùê¢ùêú ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨ ùêöùêØùêöùê¢ùê•ùêöùêõùê•ùêû :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "ùêíùêûùêûùê¶ùê¨ ùê•ùê¢ùê§ùêû ùê≠ùê°ùêûùê´ùêû ùêöùê´ùêûùêß'ùê≠ ùêöùêßùê≤ ùêÆùê¨ùêûùê´ ùê¨ùê©ùêûùêúùê¢ùêüùê¢ùêú ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨ ùêöùêØùêöùê¢ùê•ùêöùêõùê•ùêû :'(\nSend this "
                "ùê¢ùêß ùêö ùê†ùê´ùê®ùêÆùê© ùêúùê°ùêöùê≠ ùê≤ùê®ùêÆ'ùê´ùêû ùêöùêùùê¶ùê¢ùêß ùê¢ùêß ùê≠ùê® ùêüùê¢ùêßùêù ùê¢ùê≠ùê¨ ùêúùêÆùê´ùê´ùêûùêßùê≠ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨!",
                parse_mode=ParseMode.MARKDOWN,
            )


@run_async
def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Back",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "ùêáùê¢ ùê≠ùê°ùêûùê´ùêû! ùêìùê°ùêûùê´ùêû ùêöùê´ùêû ùê™ùêÆùê¢ùê≠ùêû ùêö ùêüùêûùê∞ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨ ùêüùê®ùê´ {} - ùê†ùê® ùêöùê°ùêûùêöùêù ùêöùêßùêù ùê©ùê¢ùêúùê§ ùê∞ùê°ùêöùê≠ "
                "ùê≤ùê®ùêÆ'ùê´ùêû ùê¢ùêßùê≠ùêûùê´ùêûùê¨ùê≠ùêûùêù ùê¢ùêß.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "ùêáùê¢ ùê≠ùê°ùêûùê´ùêû! ùêìùê°ùêûùê´ùêû ùêöùê´ùêû ùê™ùêÆùê¢ùê≠ùêû ùêö ùêüùêûùê∞ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨ ùêüùê®ùê´ {} - ùê†ùê® ùêöùê°ùêûùêöùêù ùêöùêßùêù ùê©ùê¢ùêúùê§ ùê∞ùê°ùêöùê≠ "
                "ùê≤ùê®ùêÆ'ùê´ùêû ùê¢ùêßùê≠ùêûùê´ùêûùê¨ùê≠ùêûùêù ùê¢ùêß.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text="ùêáùê¢ ùê≠ùê°ùêûùê´ùêû! ùêìùê°ùêûùê´ùêû ùêöùê´ùêû ùê™ùêÆùê¢ùê≠ùêû ùêö ùêüùêûùê∞ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨ ùêüùê®ùê´ {} - ùê†ùê® ùêöùê°ùêûùêöùêù ùêöùêßùêù ùê©ùê¢ùêúùê§ ùê∞ùê°ùêöùê≠ "
                "ùê≤ùê®ùêÆ'ùê´ùêû ùê¢ùêßùê≠ùêûùê´ùêûùê¨ùê≠ùêûùêù ùê¢ùêß.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


@run_async
def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "ùêÇùê•ùê¢ùêúùê§ ùê°ùêûùê´ùêû ùê≠ùê® ùê†ùêûùê≠ ùê≠ùê°ùê¢ùê¨ ùêúùê°ùêöùê≠'ùê¨ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨, ùêöùê¨ ùê∞ùêûùê•ùê• ùêöùê¨ ùê≤ùê®ùêÆùê´ùê¨."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Settings",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "ùêÇùê•ùê¢ùêúùê§ ùê°ùêûùê´ùêû ùê≠ùê® ùêúùê°ùêûùêúùê§ ùê≤ùê®ùêÆùê´ ùê¨ùêûùê≠ùê≠ùê¢ùêßùê†ùê¨."

    else:
        send_settings(chat.id, user.id, True)


@run_async
def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 412094015 and DONATION_LINK:
            update.effective_message.reply_text(
                "ùêòùê®ùêÆ ùêúùêöùêß ùêöùê•ùê¨ùê® ùêùùê®ùêßùêöùê≠ùêû ùê≠ùê® ùê≠ùê°ùêû ùê©ùêûùê´ùê¨ùê®ùêß ùêúùêÆùê´ùê´ùêûùêßùê≠ùê•ùê≤ ùê´ùêÆùêßùêßùê¢ùêßùê† ùê¶ùêû "
                "[ùêáùêûùê´ùêû]({})".format(DONATION_LINK),
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "ùêà'ùêØùêû ùêèùêå'ùêûùêù ùê≤ùê®ùêÆ ùêöùêõùê®ùêÆùê≠ ùêùùê®ùêßùêöùê≠ùê¢ùêßùê† ùê≠ùê® ùê¶ùê≤ ùêúùê´ùêûùêöùê≠ùê®ùê´!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "ùêÇùê®ùêßùê≠ùêöùêúùê≠ ùê¶ùêû ùê¢ùêß ùêèùêå ùêüùê¢ùê´ùê¨ùê≠ ùê≠ùê® ùê†ùêûùê≠ ùêùùê®ùêßùêöùê≠ùê¢ùê®ùêß ùê¢ùêßùêüùê®ùê´ùê¶ùêöùê≠ùê¢ùê®ùêß."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendMessage(f"@{SUPPORT_CHAT}", "ùêòùêûùê¨ ùêà'ùê¶ ùêöùê•ùê¢ùêØùêû üòπ")
        except Unauthorized:
            LOGGER.warning(
                "Bot isnt able to send message to support_chat, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    test_handler = CommandHandler("test", test)
    start_handler = CommandHandler("start", start)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_.*")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    about_callback_handler = CallbackQueryHandler(lucas_about_callback, pattern=r"lucas_")
    source_callback_handler = CallbackQueryHandler(Source_about_callback, pattern=r"source_")

    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)

    # dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(source_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    if WEBHOOK:
        LOGGER.info("Using webhooks.")
        updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN, certificate=open(CERT_PATH, "rb"))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)

    else:
        LOGGER.info("Using long polling.")
        updater.start_polling(timeout=15, read_latency=4, clean=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
